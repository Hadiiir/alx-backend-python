from django.db import models
from django.contrib.auth import get_user_model
from django.utils import timezone
from django.db.models.signals import pre_save
from django.dispatch import receiver

User = get_user_model()

class UnreadMessagesManager(models.Manager):
    def get_queryset(self):
        """Base queryset that filters only unread messages"""
        return super().get_queryset().filter(read=False)

    def for_user(self, user):
        """Optimized query for unread messages for a specific user"""
        return self.filter(receiver=user).select_related('sender').only(
            'id', 'content', 'sender__username', 'timestamp'
        )

class Message(models.Model):
    """
    Model representing a message between users with support for:
    - Read/unread status
    - Edit history tracking
    - Threaded conversations
    """
    sender = models.ForeignKey(User, on_delete=models.CASCADE, related_name='sent_messages')
    receiver = models.ForeignKey(User, on_delete=models.CASCADE, related_name='received_messages')
    content = models.TextField()
    timestamp = models.DateTimeField(default=timezone.now)
    edited = models.BooleanField(default=False)
    edited_at = models.DateTimeField(null=True, blank=True)
    read = models.BooleanField(default=False)
    parent_message = models.ForeignKey(
        'self',
        on_delete=models.CASCADE,
        null=True,
        blank=True,
        related_name='replies'
    )

    # Custom managers
    objects = models.Manager()  # Default manager
    unread = UnreadMessagesManager()  # Custom manager for unread messages

    def __str__(self):
        status = " (edited)" if self.edited else ""
        return f"Message from {self.sender} to {self.receiver}{status}"

    def get_thread(self):
        """Returns all messages in the thread including self in chronological order"""
        messages = []
        current = self
        while current:
            messages.append(current)
            current = current.parent_message
        return reversed(messages)  # Oldest first

    def get_all_replies(self):
        """Recursively gets all replies to this message"""
        replies = []
        for reply in self.replies.all().select_related('sender', 'receiver'):
            replies.append(reply)
            replies.extend(reply.get_all_replies())
        return replies

    class Meta:
        ordering = ['-timestamp']
        indexes = [
            models.Index(fields=['receiver', 'read']),
            models.Index(fields=['parent_message']),
        ]

class MessageHistory(models.Model):
    """Tracks historical versions of edited messages"""
    message = models.ForeignKey(Message, on_delete=models.CASCADE, related_name='history')
    content = models.TextField()
    changed_at = models.DateTimeField(default=timezone.now)

    class Meta:
        ordering = ['-changed_at']
        verbose_name_plural = 'Message Histories'

    def __str__(self):
        return f"History for message #{self.message.id} at {self.changed_at}"

@receiver(pre_save, sender=Message)
def log_message_history(sender, instance, **kwargs):
    """
    Signal handler that creates a history record when a message is edited.
    Only triggers for existing messages (updates) when content changes.
    """
    if instance.pk:  # Only for existing messages
        try:
            old_message = Message.objects.get(pk=instance.pk)
            if old_message.content != instance.content:
                MessageHistory.objects.create(
                    message=instance,
                    content=old_message.content
                )
                instance.edited = True
                instance.edited_at = timezone.now()
        except Message.DoesNotExist:
            pass